# File: backend/ai_engine/validators.py
#
# This module provides helper functions used to validate trading
# strategies generated by the AI. It enforces required fields and
# checks that the sentiment (direction) of a strategy aligns with
# the user’s original belief (bullish, bearish, or neutral).
# If a validation fails, a ValueError is raised so the caller can
# handle the misalignment gracefully.

# List of fields every strategy must include; adjust if your schema changes.
REQUIRED_FIELDS = [
    "type",
    "trade_legs",
    "expiration",
    "target_return",
    "max_loss",
    "direction",
    "asset_class",
    "ticker",
]

def validate_strategy_schema(strategy: dict) -> None:
    """
    Ensure that the strategy dictionary contains all required keys and
    that none of those keys are empty or missing.

    :param strategy: The strategy dict returned from GPT.
    :raises ValueError: If any required key is missing or empty.
    """
    missing = [
        k for k in REQUIRED_FIELDS
        if k not in strategy or strategy[k] in (None, "", [])
    ]
    if missing:
        raise ValueError(
            f"Strategy missing fields: {', '.join(missing)}"
        )

def validate_sentiment_alignment(strategy: dict, expected_dir: str) -> None:
    """
    Check that the strategy’s 'direction' matches the user’s intended sentiment.
    Only enforces the lock when the expectation is explicitly bullish or bearish;
    neutral beliefs can remain neutral.

    :param strategy: The validated strategy dict.
    :param expected_dir: Expected direction ("bullish", "bearish", or "neutral").
    :raises ValueError: If a bullish/bearish expectation does not match the strategy’s direction.
    """
    got = (strategy.get("direction") or "").lower()
    exp = (expected_dir or "neutral").lower()

    # Enforce lock for bullish and bearish beliefs only
    if exp in ("bullish", "bearish") and got != exp:
        raise ValueError(
            f"sentiment_misalignment: expected={exp}, got={got}"
        )
